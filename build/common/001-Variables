CYAN="\033[4;36m"
GREEN='\033[1;32m'
GREY='\033[90m'
ORANGE='\033[0;33m'
RED='\033[0;31m'
NC='\033[0m' # No Color

abort_install() {
  echo -e "${RED}*FATAL*:${NC} $*"
  echo -e "${RED}ABORTED!${NC}"
  exit 1
}

[ "$(uci -q get env.var._provisioning_code)" = "Telstra" ] || abort_install "This script is only intended for devices with Telstra firmware"

TARGET_VERSION=""
for x in $(basename $0 | tr '-' "$IFS"); do
  TARGET_VERSION=$x
done
echo "$TARGET_VERSION" | grep -q '\.' || abort_install "Unable to determine Target Version! Did the script get renamed??"
SCRIPT=$(basename $0 | sed "s/-$TARGET_VERSION//")

VERSION=$(uci -q get version.@version[0].version | cut -d- -f1)
FW_BASE=$(uci -q get version.@version[0].marketing_version)
VARIANT=$(uci -q get env.var.variant_friendly_name | sed -e 's/TLS//' -e 's/vac//')
MAC_HEX=$(uci -q get env.var.ssid_mac_postfix_r0)
HOSTNAME=$(uci -q get system.@system[0].hostname)

[ -n "$VERSION" ]  || abort_install "Failed to determine device firmware version?"
[ -n "$FW_BASE" ]  || abort_install "Failed to determine device base firmware (marketing) version?"
[ -n "$VARIANT" ]  || abort_install "Failed to determine device variant?"
[ -n "$MAC_HEX" ]  || abort_install "Failed to determine MAC representation?"
[ -n "$HOSTNAME" ] || abort_install "Failed to determine device hostname?"

DFLT_USR=$(uci -q get web.uidefault.defaultuser)
FW_UPGRD=$(uci -q get web.uidefault.upgradefw)

INSTALLED_RELEASE="$(grep -o -m 1 -E '[0-9][0-9][0-9][0-9]\.[0-9][0-9]\.[0-9][0-9]@[0-9][0-9]:[0-9][0-9]' /usr/share/transformer/mappings/rpc/gui.map 2>/dev/null)"
TITLE="$(grep -o 'title>.*</title' /www/docroot/gateway.lp | cut -d'>' -f2 | cut -d'<' -f1 | grep -v 'ngx.print')"
BG_RFRSH="$(grep -o 'window.autoRefreshEnabled=[^;]*;' /www/docroot/gateway.lp | cut -d= -f2 | cut -d';' -f1)"
[ -z "$BG_RFRSH" ] && BG_RFRSH="true"

make_tch_gui_unhide_config() {
  if [ ! -f /etc/config/tch_gui_unhide ]; then
    touch /etc/config/tch_gui_unhide
    uci add tch_gui_unhide theme >/dev/null
    uci rename tch_gui_unhide.@theme[0]='theme'
    uci add tch_gui_unhide release >/dev/null
    uci rename tch_gui_unhide.@release[0]='release'
    if [ -f /etc/tch-gui-unhide.ignored_release ]; then
      uci set tch_gui_unhide.release.ignored="$(cat /etc/tch-gui-unhide.ignored_release)"
    else
      uci set tch_gui_unhide.release.ignored=''
    fi
  fi
}

[ -f /usr/tch-gui-unhide.theme ] && mv /usr/tch-gui-unhide.theme /etc/tch-gui-unhide.theme
if [ -f /etc/tch-gui-unhide.theme ]; then
  source /etc/tch-gui-unhide.theme
  make_tch_gui_unhide_config
  uci set tch_gui_unhide.theme.name="$THEME"
  uci set tch_gui_unhide.theme.colour="$COLOR"
  uci set tch_gui_unhide.theme.icons="$ICONS"
  [ "$KEEPLP" = "y" ] && KEEPLP='1' || KEEPLP='0'
  uci set tch_gui_unhide.theme.keep_landing_page="$KEEPLP"
  uci commit tch_gui_unhide
  rm -f /etc/tch-gui-unhide.theme
else
  THEME="$(uci -q get tch_gui_unhide.theme.name)"
  COLOR="$(uci -q get tch_gui_unhide.theme.colour)"
  ICONS="$(uci -q get tch_gui_unhide.theme.icons)"
  KEEPLP="$(uci -q get tch_gui_unhide.theme.keep_landing_page)"
fi
if [ -z "$THEME" ]; then
  KEEPLP='0'
  grep -q 'body{background-color:#353c42;' /www/docroot/css/gw.css
  if [ $? -eq 0 ]; then
    THEME=night
  else
    grep -q 'body{background-color:#fff;' /www/docroot/css/gw.css
    if [ $? -eq 0 ]; then
      THEME=light
    else
      THEME=telstra
      grep -q 'body.landingpage #detailed_info_mobile>div:nth-child(5)>form>center>div{background-color' /www/docroot/css/gw-telstra.css
      if [ $? -eq 1 -a -f /www/snippets/tabs-home.lp ]; then
        if grep -q 'T"Boost Your Wi-Fi"' /www/snippets/tabs-home.lp; then
          KEEPLP='1'
        else
          KEEPLP='0'
        fi
      fi
    fi
  fi
  case "$(grep '.smallcard .header{background-color:#......;}' /www/docroot/css/gw.css  | cut -d# -f2 | cut -d\; -f1)" in
    "005c32") COLOR=green;;
    "662e91") COLOR=purple;;
    "f36523") COLOR=orange;;
    "008fd5") COLOR=blue;;
    "272c30") COLOR=monochrome;;
    *) if [ $THEME = light ]; then COLOR=monochrome; else COLOR=blue; fi;;
  esac
  ICONS="$(grep '.card_bg:after{visibility:' /www/docroot/css/gw.css | cut -d: -f3 | cut -d\; -f1)"
fi

if grep -q 'rpc.gui.pwd.@' /www/docroot/modals/mmpbx-profile-modal.lp 2>/dev/null; then
  SIP_PWDS=y
else
  SIP_PWDS=n
fi

if grep -q '@media screen and (min-width:1200px) and (max-width:1499px){' /www/docroot/css/responsive.css; then
  ACROSS=5
else
  ACROSS=4
fi

if [ $(grep -r "^--" /www/docroot/modals/ | grep -iv pretranslated | wc -l) -eq 0 ]; then
  MINIFY=y
else
  MINIFY=n
fi

if grep -q 'rpc.gui.UpdateAvailable' /www/docroot/gateway.lp; then
  if grep -q '^local inc_pre = "n"' /usr/share/transformer/mappings/rpc/gui.map; then
    UPDATE_BTN=y
  else
    UPDATE_BTN=p
  fi
elif grep -q 'tch-gui-unhide' /www/docroot/gateway.lp; then
  UPDATE_BTN=n
else
  UPDATE_BTN=y
fi

FIX_DFLT_USR=n
FIX_FW_UPGRD=n

if [ "$(uci -q get dropbear.lan.enable)" = "1" -a "$(uci -q get dropbear.lan.PasswordAuth)" = "on" -a "$(uci -q get dropbear.lan.RootPasswordAuth)" = "on" -a "$(uci -q get dropbear.lan.RootLogin)" = "1" ]; then
  FIX_SSH=n
else
  FIX_SSH=y
fi
if [ "$(uci -q get system.config.export_plaintext)" = "1" -a "$(uci -q get system.config.export_unsigned)" = "1" -a "$(uci -q get system.config.import_plaintext)" = "1" -a "$(uci -q get system.config.import_unsigned)" = "1" ]; then
  FIX_CFG_PORT=n
else
  FIX_CFG_PORT=y
fi
echo "$(uci -q get web.parentalblock.roles)" | grep -q "admin"
if [ $? -eq 0 ]; then
  FIX_PARENT_BLK=n
else
  FIX_PARENT_BLK=y
fi

if [ -z "$INSTALLED_RELEASE" ]; then
  CHART_CARDS='i'
  if [ -f .defaults.tch-gui-unhide ]; then
    . ./.defaults.tch-gui-unhide
  fi
else
  if [ "$(uci -q get web.card_Charts.hide)" = "0" ]; then
    CHART_CARDS="s"
  elif [ $(uci -q show web | grep -E "card_(CPU|RAM|WANDown|WANUp).hide='0'" | wc -l) -gt 0 ]; then
    CHART_CARDS="i"
  else
    CHART_CARDS="n"
  fi
fi

if grep -qF 'home.lp' /etc/nginx/nginx.conf; then
  START_PAGE="home.lp"
else
  START_PAGE="gateway.lp"
fi

# Keep count of changes so we know whether to restart services
SRV_cron=0
SRV_dnsmasq=0
SRV_dropbear=0
SRV_firewall=0
SRV_iperf=0
SRV_mmpbxd=0
SRV_network=0
SRV_nginx=0
SRV_power=0
SRV_system=0
SRV_transformer=0
RESTART_SERVICES=y

restart() {
  local service=$1
  local changes=${2:-0}
  local action=${3:-restart}
  if [ $changes -gt 0 ]; then
    if pgrep -f /etc/init.d/$service >/dev/null; then
      echo -e "[$SCRIPT]: ${ORANGE}>> WARNING! Service $service was not ${action}ed because the init script is already running?${NC}"
    else
      [ -n "$VERBOSE" ] && echo -e "[$SCRIPT]: >> /etc/init.d/$service $action"
      /etc/init.d/$service $action >/dev/null 2>&1
    fi
  else
    [ -n "$VERBOSE" ] && echo -e "[$SCRIPT]: >> No changes applied to $service - skipping $action"
  fi
}

apply_service_changes() {
  if [ $RESTART_SERVICES = y ]; then
    echo -e "[$SCRIPT]: Restarting any changed services..."
    # Need to stop watchdog whilst we restart transformer, because if it does not find /var/run/transformer.pid, it will reboot the system!
    restart watchdog-tch 1 stop
    restart transformer $SRV_transformer
    restart cron $SRV_cron
    restart dnsmasq $SRV_dnsmasq
    restart dropbear $SRV_dropbear
    restart system $SRV_system
    restart iperf $SRV_iperf
    restart mmpbxd $SRV_mmpbxd
    restart nginx $SRV_nginx
    restart firewall $SRV_firewall
    restart network $SRV_network reload
    restart watchdog-tch 1 start
  fi
}

SEARCH_PATH="$(pwd)"
echo "$SEARCH_PATH" | grep -q "/root" || SEARCH_PATH="$SEARCH_PATH /root"
USB="$(find $(uci get mountd.mountd.path) -follow -maxdepth 1 -mindepth 1 -type d)"
if [ -n "$USB" ]; then
  echo "$SEARCH_PATH" | grep -q "${MOUNT_PATH}${USB}" || SEARCH_PATH="$SEARCH_PATH ${MOUNT_PATH}${USB}"
fi
[ -n "$VERBOSE" ] && echo -e "[$SCRIPT]: Search path = $SEARCH_PATH"

find_file() {
  local filename="$1"
  local SubFolder="$2"
  local subfolder=$(echo "$SubFolder" | tr '[A-Z]' '[a-z]')
  local SUBFOLDER=$(echo "$SubFolder" | tr '[a-z]' '[A-Z]')
  local folder

  if [ -n "$filename" ]; then
    for folder in $SEARCH_PATH; do
      if [ -e $folder/$filename ]; then
        echo "$folder/$filename"
        return
      elif [ -n "$SubFolder" ]; then
        if [ -e $folder/$SubFolder/$filename ]; then
          echo "$folder/$SubFolder/$filename"
          return
        elif [ -e $folder/$subfolder/$filename ]; then
          echo $folder/$subfolder/$filename
          return
        elif [ -e $folder/$SUBFOLDER/$filename ]; then
          echo $folder/$SUBFOLDER/$filename
          return        
        fi
      fi
    done
  fi
}

