echo -e "[$SCRIPT]: Fix missing values on rpc.network.firewall.userrule."
sed \
  -e '/dest_port = {/i \      dest_mac = {' \
  -e '/dest_port = {/i \        access = "readWrite",' \
  -e '/dest_port = {/i \        type = "string",' \
  -e '/dest_port = {/i \      },' \
  -e '/dest_port =  function(mapping, paramname, k/i \    dest_mac =  function(mapping, paramname, key)' \
  -e '/dest_port =  function(mapping, paramname, k/i \        return getFromUCI(key, paramname)' \
  -e '/dest_port =  function(mapping, paramname, k/i \    end,' \
  -e '/dest_port =  function(mapping, paramname, p/i \    dest_mac =  function(mapping, paramname, paramvalue, key)' \
  -e '/dest_port =  function(mapping, paramname, p/i \        setOnUCI(key, paramname, paramvalue)' \
  -e '/dest_port =  function(mapping, paramname, p/i \    end,' \
  -i /usr/share/transformer/mappings/rpc/network.firewall.userrule.map
SRV_transformer=$(( $SRV_transformer + 1 ))

echo -e "[$SCRIPT]: Fix missing values on rpc.network.firewall.userrule_v6."
sed \
  -e '/src = {/i \      name = {' \
  -e '/src = {/i \        access = "readWrite",' \
  -e '/src = {/i \        type = "string",' \
  -e '/src = {/i \      },' \
  -e '/src =  function(mapping, paramname, k/i \    name =  function(mapping, paramname, key)' \
  -e '/src =  function(mapping, paramname, k/i \        return getFromUCI(key, paramname)' \
  -e '/src =  function(mapping, paramname, k/i \    end,' \
  -e '/src =  function(mapping, paramname, p/i \    name =  function(mapping, paramname, paramvalue, key)' \
  -e '/src =  function(mapping, paramname, p/i \        setOnUCI(key, paramname, paramvalue)' \
  -e '/src =  function(mapping, paramname, p/i \    end,' \
  -e '/dest_port = {/i \      dest_mac = {' \
  -e '/dest_port = {/i \        access = "readWrite",' \
  -e '/dest_port = {/i \        type = "string",' \
  -e '/dest_port = {/i \      },' \
  -e '/dest_port =  function(mapping, paramname, k/i \    dest_mac =  function(mapping, paramname, key)' \
  -e '/dest_port =  function(mapping, paramname, k/i \        return getFromUCI(key, paramname)' \
  -e '/dest_port =  function(mapping, paramname, k/i \    end,' \
  -e '/dest_port =  function(mapping, paramname, p/i \    dest_mac =  function(mapping, paramname, paramvalue, key)' \
  -e '/dest_port =  function(mapping, paramname, p/i \        setOnUCI(key, paramname, paramvalue)' \
  -e '/dest_port =  function(mapping, paramname, p/i \    end,' \
  -i /usr/share/transformer/mappings/rpc/network.firewall.userrule_v6.map
SRV_transformer=$(( $SRV_transformer + 1 ))

# Version 2021.02.22 set an incorrect value for synflood_rate, so have to fix it
synflood_rate="$(uci -q get firewall.@defaults[0].synflood_rate)"
if [ -n "$synflood_rate" ]; then
  echo $synflood_rate | grep -q -E '^[0-9]+/s$'
  if [ $? = 1 ]; then
    [ -n "$VERBOSE" ] && echo -e "[$SCRIPT]: Fixing configuration firewall.@defaults[0].synflood_rate"
    synflood_rate="$(echo $synflood_rate | grep -o -E '^[0-9]+')"
    uci set firewall.@defaults[0].synflood_rate="$synflood_rate/s"
    SRV_firewall=$(( $SRV_firewall + 1 ))
  fi
fi
# Version 2021.02.22 allowed setting of tcp_syncookies but it is not enabled in kernel, so have to remove it
if [ -n "$(uci -q get firewall.@defaults[0].tcp_syncookies)" ]; then
  [ -n "$VERBOSE" ] && echo -e "[$SCRIPT]: Deleting configuration firewall.@defaults[0].tcp_syncookies"
  uci -q delete firewall.@defaults[0].tcp_syncookies
  SRV_firewall=$(( $SRV_firewall + 1 ))
fi

echo -e "[$SCRIPT]: Add missing transformer mappings for firewall"
sed \
  -e 's/"type", "family"/"type", "path", "family"/' \
  -e 's/"hashsize", "timeout",$/& "match",/' \
  -e 's/"wan",$/& "_key"/' \
  -i /usr/share/transformer/mappings/uci/firewall.map

echo -e "[$SCRIPT]: Add transformer mapping for uci.firewall.nat."
sed -n '/-- uci.firewall.redirect/,/MultiMap/p' /usr/share/transformer/mappings/uci/firewall.map | sed -e 's/redirect/nat/g' >> /usr/share/transformer/mappings/uci/firewall.map

echo -e "[$SCRIPT]: Checking firewall configuration for DNS hijacking"
if [ "$(uci -q get firewall.dns_xcptn)" != "ipset" ]; then
  [ -n "$VERBOSE" ] && echo -e "[$SCRIPT]: Creating configuration firewall.dns_xcptn"
  uci set firewall.dns_xcptn='ipset'
  uci set firewall.dns_xcptn.name='dns_xcptn'
  uci set firewall.dns_xcptn.family='ipv4'
  uci set firewall.dns_xcptn.storage='hash'
  uci set firewall.dns_xcptn.match='ip'
  uci set firewall.dns_xcptn.enabled='0'
  SRV_firewall=$(( $SRV_firewall + 1 ))
fi
if [ ! -e /etc/firewall.ipset.dns_xcptn ]; then
  [ -n "$VERBOSE" ] && echo -e "[$SCRIPT]: Creating file /etc/firewall.ipset.dns_xcptn"
  echo -n > /etc/firewall.ipset.dns_xcptn
fi
if [ "$(uci -q get firewall.dns_int)" != "redirect" ]; then
  [ -n "$VERBOSE" ] && echo -e "[$SCRIPT]: Creating configuration firewall.dns_int"
  uci set firewall.dns_int='redirect'
  uci set firewall.dns_int.name='Intercept-DNS'
  uci set firewall.dns_int.family='ipv4'
  uci set firewall.dns_int.src='lan'
  uci set firewall.dns_int.src_dport='53'
  uci set firewall.dns_int.proto='tcp udp'
  uci set firewall.dns_int.dest='wan'
  uci set firewall.dns_int.target='DNAT'
  uci set firewall.dns_int.ipset='!dns_xcptn src'
  uci set firewall.dns_int.enabled='0'
  SRV_firewall=$(( $SRV_firewall + 1 ))
fi
if [ "$(uci -q get firewall.dns_masq)" != "nat" ]; then
  [ -n "$VERBOSE" ] && echo -e "[$SCRIPT]: Creating configuration firewall.dns_masq"
  uci set firewall.dns_masq='nat'
  uci set firewall.dns_masq.name='Masquerade-DNS'
  uci set firewall.dns_masq.family='ipv4'
  uci set firewall.dns_masq.src='lan'
  uci set firewall.dns_masq.dest_port='53'
  uci set firewall.dns_masq.proto='tcp udp'
  uci set firewall.dns_masq.target='MASQUERADE'
  uci set firewall.dns_masq.enabled='0'
  SRV_firewall=$(( $SRV_firewall + 1 ))
fi
if [ "$(uci -q get firewall.dns6_xcptn)" != "ipset" ]; then
  [ -n "$VERBOSE" ] && echo -e "[$SCRIPT]: Creating configuration firewall.dns6_xcptn"
  uci set firewall.dns6_xcptn='ipset'
  uci set firewall.dns6_xcptn.name='dns6_xcptn'
  uci set firewall.dns6_xcptn.family='ipv6'
  uci set firewall.dns6_xcptn.storage='hash'
  uci set firewall.dns6_xcptn.match='ip'
  uci set firewall.dns6_xcptn.enabled='0'
  SRV_firewall=$(( $SRV_firewall + 1 ))
fi
if [ ! -e /etc/firewall.ipset.dns6_xcptn ]; then
  [ -n "$VERBOSE" ] && echo -e "[$SCRIPT]: Creating file /etc/firewall.ipset.dns6_xcptn"
  echo -n > /etc/firewall.ipset.dns6_xcptn
fi
if pgrep /usr/sbin/tproxy-go > /dev/null; then
  /etc/init.d/tproxy stop
  SRV_firewall=$(( $SRV_firewall + 1 ))
fi
if grep -q ':.*ARMv7' /proc/cpuinfo; then
  [ -n "$VERBOSE" ] && echo -e "[$SCRIPT]: Extracting /tmp/tproxy-go.armv5.bz2 to /usr/sbin/tproxy-go"
  bzcat /tmp/tproxy-go.armv5.bz2 > /usr/sbin/tproxy-go
elif grep -q ':.*Broadcom BMIPS4350' /proc/cpuinfo; then
  [ -n "$VERBOSE" ] && echo -e "[$SCRIPT]: Extracting /tmp/tproxy-go.mips.bz2 to /usr/sbin/tproxy-go"
  bzcat /tmp/tproxy-go.mips.bz2 > /usr/sbin/tproxy-go
elif grep -q 'BCM63144' /proc/socinfo; then
  [ -n "$VERBOSE" ] && echo -e "[$SCRIPT]: Extracting /tmp/tproxy-go.arm64.bz2 to /usr/sbin/tproxy-go"
  bzcat /tmp/tproxy-go.arm64.bz2 > /usr/sbin/tproxy-go
else
  echo -e "[$SCRIPT]: ${RED}ERROR! Unable to identify device architecture for tproxy-go executable??${NC}"
fi
rm -f /tmp/tproxy-go*.bz2
if [ -e /usr/sbin/tproxy-go ]; then
  chmod +x /usr/sbin/tproxy-go
  if [ ! -e /etc/config/tproxy ]; then
    echo -e "[$SCRIPT]: Creating tproxy config for IPv6 DNS hijacking"
    cat <<TPROXY > /etc/config/tproxy
config tproxy 'config'
        option enabled '1'
        option verbose '0'

TPROXY
    chmod 644 /etc/config/tproxy
    /etc/init.d/tproxy enable
  fi
  if [ "$(uci -q get tproxy.dnsv6)" != "rule" ]; then
    [ -n "$VERBOSE" ] && echo -e "[$SCRIPT]: Creating configuration tproxy.dnsv6"
    uci set tproxy.dnsv6=rule
    uci set tproxy.dnsv6.enabled='0'
    uci set tproxy.dnsv6.name='Intercept-DNSv6'
    uci set tproxy.dnsv6.family='ipv6'
    uci set tproxy.dnsv6.proto='tcp udp'
    uci set tproxy.dnsv6.listenPort='8053'
    uci set tproxy.dnsv6.destPort='53'
    uci set tproxy.dnsv6.ipset='!dns6_xcptn src'
    uci commit tproxy
  elif [ "$(uci -q get tproxy.dnsv6.name)" != "Intercept-DNSv6" ]; then
    [ -n "$VERBOSE" ] && echo -e "[$SCRIPT]: Setting tproxy.dnsv6.name to Intercept-DNSv6"
    uci set tproxy.dnsv6.name='Intercept-DNSv6'
    uci commit tproxy
  fi
  if [ "$(uci -q get firewall.tproxy)" != "include" ]; then
    [ -n "$VERBOSE" ] && echo -e "[$SCRIPT]: Creating configuration firewall.tproxy"
    uci set firewall.tproxy='include'
    uci set firewall.tproxy.type='script'
    uci set firewall.tproxy.path='/usr/sbin/tproxy-firewall'
    uci set firewall.tproxy.reload='1'
    uci set firewall.tproxy.enabled='1'
    SRV_firewall=$(( $SRV_firewall + 1 ))
  fi
fi
if [ "$(uci -q get firewall.dot_fwd_xcptn)" != "rule" ]; then
  [ -n "$VERBOSE" ] && echo -e "[$SCRIPT]: Creating configuration firewall.dot_fwd_xcptn"
  uci set firewall.dot_fwd_xcptn='rule'
  uci set firewall.dot_fwd_xcptn.name='Allow-DoT'
  uci set firewall.dot_fwd_xcptn.src='lan'
  uci set firewall.dot_fwd_xcptn.dest='wan'
  uci set firewall.dot_fwd_xcptn.dest_port='853'
  uci set firewall.dot_fwd_xcptn.proto='tcp udp'
  uci set firewall.dot_fwd_xcptn.target='ACCEPT'
  uci set firewall.dot_fwd_xcptn.family='ipv4'
  uci set firewall.dot_fwd_xcptn.ipset='dns_xcptn src'
  uci set firewall.dot_fwd_xcptn.enabled='0'
  SRV_firewall=$(( $SRV_firewall + 1 ))
fi
if [ "$(uci -q get firewall.dot6_fwd_xcptn)" != "rule" ]; then
  if [ "$(uci -q get firewall.dot_fwd)" = "rule" ]; then
    dot_fwd_enabled="$(uci -q get firewall.dot_fwd.enabled)"
    [ -n "$VERBOSE" ] && echo -e "[$SCRIPT]: Removing firewall.dot_fwd to ensure rule sequencing is correct"
    uci -q delete firewall.dot_fwd
    uci commit firewall
  else
    dot_fwd_enabled='0'
  fi
  [ -n "$VERBOSE" ] && echo -e "[$SCRIPT]: Creating configuration firewall.dot6_fwd_xcptn"
  uci set firewall.dot6_fwd_xcptn='rule'
  uci set firewall.dot6_fwd_xcptn.name='Allow-DoTv6'
  uci set firewall.dot6_fwd_xcptn.src='lan'
  uci set firewall.dot6_fwd_xcptn.dest='wan'
  uci set firewall.dot6_fwd_xcptn.dest_port='853'
  uci set firewall.dot6_fwd_xcptn.proto='tcp udp'
  uci set firewall.dot6_fwd_xcptn.target='ACCEPT'
  uci set firewall.dot6_fwd_xcptn.family='ipv6'
  uci set firewall.dot6_fwd_xcptn.ipset='dns6_xcptn src'
  uci set firewall.dot6_fwd_xcptn.enabled="$(uci get tproxy.dnsv6.enabled)"
  SRV_firewall=$(( $SRV_firewall + 1 ))
fi
if [ "$(uci -q get firewall.dot_fwd)" != "rule" ]; then
  [ -n "$VERBOSE" ] && echo -e "[$SCRIPT]: Creating configuration firewall.dot_fwd"
  uci set firewall.dot_fwd='rule'
  uci set firewall.dot_fwd.name='Deny-DoT'
  uci set firewall.dot_fwd.src='lan'
  uci set firewall.dot_fwd.dest='wan'
  uci set firewall.dot_fwd.dest_port='853'
  uci set firewall.dot_fwd.proto='tcp udp'
  uci set firewall.dot_fwd.target='REJECT'
  uci set firewall.dot_fwd.enabled="$dot_fwd_enabled"
  SRV_firewall=$(( $SRV_firewall + 1 ))
fi
if [ "$(uci -q get firewall.dot_fwd.family)" != "" ]; then
  [ -n "$VERBOSE" ] && echo -e "[$SCRIPT]: Removing family configuration from firewall.dot_fwd"
  uci -q delete firewall.dot_fwd.family
  SRV_firewall=$(( $SRV_firewall + 1 ))
fi
if [ ! -e /etc/firewall.ipset.doh ]; then
  [ -n "$VERBOSE" ] && echo -e "[$SCRIPT]: Creating file /etc/firewall.ipset.doh"
  echo -n > /etc/firewall.ipset.doh
fi
if [ "$(uci -q get firewall.doh)" != "ipset" ]; then
  [ -n "$VERBOSE" ] && echo -e "[$SCRIPT]: Creating configuration firewall.doh"
  uci set firewall.doh='ipset'
  uci set firewall.doh.name='doh'
  uci set firewall.doh.family='ipv4'
  uci set firewall.doh.storage='hash'
  uci set firewall.doh.match='ip'
  uci set firewall.doh.enabled='0'
  SRV_firewall=$(( $SRV_firewall + 1 ))
fi
if [ ! -e /etc/firewall.ipset.doh6 ]; then
  [ -n "$VERBOSE" ] && echo -e "[$SCRIPT]: Creating file /etc/firewall.ipset.doh6"
  echo -n > /etc/firewall.ipset.doh6
fi
if [ "$(uci -q get firewall.doh6)" != "ipset" ]; then
  [ -n "$VERBOSE" ] && echo -e "[$SCRIPT]: Creating configuration firewall.doh"
  uci set firewall.doh6='ipset'
  uci set firewall.doh6.name='doh6'
  uci set firewall.doh6.family='ipv6'
  uci set firewall.doh6.storage='hash'
  uci set firewall.doh6.match='ip'
  uci set firewall.doh6.enabled='0'
  SRV_firewall=$(( $SRV_firewall + 1 ))
fi
if [ "$(uci -q get firewall.ipsets_restore)" != "include" ]; then
  [ -n "$VERBOSE" ] && echo -e "[$SCRIPT]: Creating configuration firewall.ipsets_restore"
  uci set firewall.ipsets_restore='include'
  uci set firewall.ipsets_restore.type='script'
  uci set firewall.ipsets_restore.path='/usr/sbin/ipsets-restore'
  uci set firewall.ipsets_restore.reload='1'
  uci set firewall.ipsets_restore.enabled='0'
  SRV_firewall=$(( $SRV_firewall + 1 ))
fi
if [ "$(uci -q get firewall.ipsets_restore.reload)" != "1" ]; then
  uci set firewall.ipsets_restore.reload='1'
  SRV_firewall=$(( $SRV_firewall + 1 ))
fi
if [ "$(uci -q get firewall.doh_fwd_xcptn)" != "rule" ]; then
  [ -n "$VERBOSE" ] && echo -e "[$SCRIPT]: Creating configuration firewall.doh_fwd_xcptn"
  uci set firewall.doh_fwd_xcptn='rule'
  uci set firewall.doh_fwd_xcptn.name='Allow-DoH'
  uci set firewall.doh_fwd_xcptn.src='lan'
  uci set firewall.doh_fwd_xcptn.dest='wan'
  uci set firewall.doh_fwd_xcptn.dest_port='443'
  uci set firewall.doh_fwd_xcptn.proto='tcp udp'
  uci set firewall.doh_fwd_xcptn.family='ipv4'
  uci set firewall.doh_fwd_xcptn.ipset='dns_xcptn src'
  uci set firewall.doh_fwd_xcptn.target='ACCEPT'
  uci set firewall.doh_fwd_xcptn.enabled='0'
  SRV_firewall=$(( $SRV_firewall + 1 ))
fi
if [ "$(uci -q get firewall.doh_fwd)" != "rule" ]; then
  [ -n "$VERBOSE" ] && echo -e "[$SCRIPT]: Creating configuration firewall.doh_fwd"
  uci set firewall.doh_fwd='rule'
  uci set firewall.doh_fwd.name='Deny-DoH'
  uci set firewall.doh_fwd.src='lan'
  uci set firewall.doh_fwd.dest='wan'
  uci set firewall.doh_fwd.dest_port='443'
  uci set firewall.doh_fwd.proto='tcp udp'
  uci set firewall.doh_fwd.family='ipv4'
  uci set firewall.doh_fwd.ipset='doh dest'
  uci set firewall.doh_fwd.target='REJECT'
  uci set firewall.doh_fwd.enabled='0'
  SRV_firewall=$(( $SRV_firewall + 1 ))
fi
if [ "$(uci -q get firewall.doh6_fwd_xcptn)" != "rule" ]; then
  if [ "$(uci -q get firewall.doh6_fwd)" = "rule" ]; then
    doh6_fwd_enabled="$(uci -q get firewall.doh6_fwd.enabled)"
    [ -n "$VERBOSE" ] && echo -e "[$SCRIPT]: Removing firewall.doh6_fwd to ensure rule sequencing is correct"
    uci -q delete firewall.doh6_fwd
    uci commit firewall
  else
    doh6_fwd_enabled='0'
  fi
  [ -n "$VERBOSE" ] && echo -e "[$SCRIPT]: Creating configuration firewall.dot6_fwd_xcptn"
  uci set firewall.doh6_fwd_xcptn='rule'
  uci set firewall.doh6_fwd_xcptn.name='Allow-DoHv6'
  uci set firewall.doh6_fwd_xcptn.src='lan'
  uci set firewall.doh6_fwd_xcptn.dest='wan'
  uci set firewall.doh6_fwd_xcptn.dest_port='443'
  uci set firewall.doh6_fwd_xcptn.proto='tcp udp'
  uci set firewall.doh6_fwd_xcptn.family='ipv6'
  uci set firewall.doh6_fwd_xcptn.ipset='dns6_xcptn src'
  uci set firewall.doh6_fwd_xcptn.target='ACCEPT'
  uci set firewall.doh6_fwd_xcptn.enabled="$doh6_fwd_enabled"
  SRV_firewall=$(( $SRV_firewall + 1 ))
fi
if [ "$(uci -q get firewall.doh6_fwd)" != "rule" ]; then
  [ -n "$VERBOSE" ] && echo -e "[$SCRIPT]: Creating configuration firewall.doh6_fwd"
  uci set firewall.doh6_fwd='rule'
  uci set firewall.doh6_fwd.name='Deny-DoHv6'
  uci set firewall.doh6_fwd.src='lan'
  uci set firewall.doh6_fwd.dest='wan'
  uci set firewall.doh6_fwd.dest_port='443'
  uci set firewall.doh6_fwd.proto='tcp udp'
  uci set firewall.doh6_fwd.family='ipv6'
  uci set firewall.doh6_fwd.ipset='doh6 dest'
  uci set firewall.doh6_fwd.target='REJECT'
  uci set firewall.doh6_fwd.enabled="$doh6_fwd_enabled"
  SRV_firewall=$(( $SRV_firewall + 1 ))
fi
if [ "$(uci -q get firewall.doh6_fwd.name)" != "Deny-DoHv6" ]; then
  uci set firewall.doh6_fwd.name='Deny-DoHv6'
fi
if [ $(grep doh-ipsets-maintain /etc/crontabs/root | wc -l) -eq 0 ]; then
  mm=$(awk 'BEGIN{srand();print int(rand()*59);}')
  hh=$(awk 'BEGIN{srand();print int(rand()*2)+3;}')
  [ -n "$VERBOSE" ] && echo -e "[$SCRIPT]: Adding /usr/sbin/doh-ipsets-maintain cron task for Sunday at $hh:$mm"
  echo "#$mm $hh * * 6 /usr/sbin/doh-ipsets-maintain" >> /etc/crontabs/root
  SRV_cron=$(( $SRV_cron + 1 ))
fi

echo -e "[$SCRIPT]: Checking firewall configuration for Intrusion Protection"
chmod +x /usr/share/intrusion-protection/firewall.sh
if [ ! -e /etc/config/intrusion_protect ]; then
  [ -n "$VERBOSE" ] && echo -e "[$SCRIPT]: Creating /etc/config/intrusion_protect"
  cat <<IP_CONFIG > /etc/config/intrusion_protect
config intrusion_protect 'config'
        option enabled '0'

config whitelist 'WhiteList'
        option enabled '0'

config blacklist 'BlackList'
        option enabled '0'
        option logging '0'

config blocklist 'ETfwip'
        option enabled '1'
        option url 'http://rules.emergingthreats.net/fwrules/emerging-Block-IPs.txt'
        option description 'Emerging Threats lists offensive IPs such as botnet command servers.'
        option logging '0'

config blocklist 'ETcompromised'
        option enabled '0'
        option url 'https://rules.emergingthreats.net/blockrules/compromised-ips.txt'
        option description 'This is a list of hosts from Emerging Threats that are known to be compromised.'
        option logging '0'

config blocklist 'CIArmy'
        option enabled '0'
        option url 'http://cinsscore.com/list/ci-badguys.txt'
        option description 'The CINS Army list is a subset of the CINS Active Threat Intelligence ruleset, and consists of IP addresses that meet one of two basic criteria: 1) The IPs recent Rogue Packet score factor is very poor, or 2) The IP has tripped a designated number of "trusted" alerts across a given number of our Sentinels deployed around the world.'
        option logging '0'

config blocklist 'BlockListDE'
        option enabled '0'
        option url 'https://www.blocklist.de/downloads/export-ips_all.txt'
        option description 'blocklist.de collects reports from fail2ban probes, listing password brute-forces, scanners and other offenders.'
        option logging '0'

IP_CONFIG
  chmod 644 /etc/config/intrusion_protect
fi
if [ "$(uci -q get firewall.intrusion_protect)" != "include" ]; then
  [ -n "$VERBOSE" ] && echo -e "[$SCRIPT]: Creating configuration firewall.intrusion_protect"
  uci set firewall.intrusion_protect='include'
  uci set firewall.intrusion_protect.type='script'
  uci set firewall.intrusion_protect.family='IPv4'
  uci set firewall.intrusion_protect.path='/usr/share/intrusion-protection/firewall.sh'
  uci set firewall.intrusion_protect.reload='1'
  uci set firewall.intrusion_protect.enabled='1'
  SRV_firewall=$(( $SRV_firewall + 1 ))
fi
if [ "$(uci -q get firewall.intrusion_protect.reload)" != "1" ]; then
  uci set firewall.intrusion_protect.reload='1'
  SRV_firewall=$(( $SRV_firewall + 1 ))
fi
if [ "$(uci -q get firewall.intrusion_protect.enabled)" != "1" ]; then
  uci set firewall.intrusion_protect.enabled='1'
  SRV_firewall=$(( $SRV_firewall + 1 ))
fi
if [ $(grep /usr/share/intrusion-protection/firewall.sh /etc/crontabs/root | wc -l) -eq 0 ]; then
  mm=$(awk 'BEGIN{srand();print int(rand()*59);}')
  hh=$(awk 'BEGIN{srand();print int(rand()*2)+3;}')
  [ -n "$VERBOSE" ] && echo -e "[$SCRIPT]: Adding /usr/share/intrusion-protection/firewall.sh cron task every day at $hh:$mm"
  echo "$mm $hh * * * /usr/share/intrusion-protection/firewall.sh update" >> /etc/crontabs/root
  SRV_cron=$(( $SRV_cron + 1 ))
fi

[ $SRV_firewall -gt 0 ] && uci commit firewall

if [ -e /www/docroot/modals/dosprotect-modal.lp ]; then
  echo -e "[$SCRIPT]: Fixing DoS Protection headings"
  sed \
    -e 's/DoS Protect Option/Firewall/' \
    -e 's/Settings/DoS Protection/' \
    -i /www/docroot/modals/dosprotect-modal.lp
fi

