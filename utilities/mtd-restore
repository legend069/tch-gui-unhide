#!/bin/sh

SCRIPT="$(basename $0)"
VERSION=$(uci -q get version.@version[0].marketing_version)
VARIANT=$(uci -q get env.var.variant_friendly_name)
[ -z "$VARIANT" ] && VARIANT=$(uci -q get env.var.prod_friendly_name | sed -e 's/Technicolor //')

usage() {
cat <<EOH
Restores mtd or ubifs partitions from an attached USB device or SSHFS 
filesystem. Only changed partitions are restored (unless -s is specified).

USB devices have priority over SSHFS filesystems.

Due to the nature of the UBI filesystem, restores will fail unless the 
target partition is not mounted.

Usage: $0 [options] [partition ...]

Options:
 -b             When restoring firmware bank partitions, swap the banks
                  (e.g. if restoring bank_1, write it into bank_2) 
 -d directory   The name of the directory on the USB device or SSHFS
                  filesystem containing the backups. If not specified,
                  defaults to: backups or backups-$VERSION
 -q             Quiet mode
 -r             Reboot after last partition successfully restored
 -s             Skip check for changed partitions and always restore
 -v             Skip verification of image checksum (if it exists i.e. if
                  mtd-backup was NOT executed with the -s option)
 -U             Download the latest version of $SCRIPT from GitHub
                  Do NOT specify any other parameters or options if doing
                  a version upgrade.
 --dry-run      Show restore commands rather than executing them
Parameters:
 partition      One or more partitions to restored.
                  Specify either the device (e.g. mtd2) or name
                    (e.g. rootfs_data or data)
                  Do not specify the device variant prefix (e.g. $VARIANT-)
                  If not specified, defaults to: rootfs_data

EOH
exit
}

upgrade() {
  RESPONSE_CODE=$(curl -kLsI -o /dev/null -w '%{http_code}' https://raw.githubusercontent.com/seud0nym/tch-gui-unhide/master/utilities/$SCRIPT)
  if [ "$RESPONSE_CODE" = 200 ]; then
    curl -kL -o $SCRIPT https://raw.githubusercontent.com/seud0nym/tch-gui-unhide/master/utilities/$SCRIPT
    if [ $? -eq 0 ]; then
      chmod +x $SCRIPT
      echo "[$SCRIPT] Successfully downloaded $SCRIPT."
    else
      echo "[$SCRIPT] Failed to download $SCRIPT."
    fi
  elif [ "$RESPONSE_CODE" = 404 ]; then
    echo "[$SCRIPT] ERROR! Not found on GitHub???"
  elif [ "$RESPONSE_CODE" = 000 ]; then
    echo "ERROR! No Internet connection???"
  else
    echo "[$SCRIPT] ERROR! Unknown response code $RESPONSE_CODE"
  fi
  exit
}

DIR="backups"
DRY_RUN=N
QUIET=""
REBOOT=N
SKIP_CHG_CHECK=N
SKIP_SHA_CHECK=N
SWAP_BANKS=N

GREEN='\033[1;32m'
ORANGE='\033[0;33m'
RED='\033[0;31m'
NC='\033[0m' # No Color

while getopts :bd:qrsvU-: option; do
 case "${option}" in
  -)  case "${OPTARG}" in
        dry-run) DRY_RUN=Y;;
        *) usage;;
      esac;;
  b)  SWAP_BANKS=Y;;
  d)  DIR="$(echo $OPTARG | sed -e 's,/$,,')";;
  q)  QUIET="-q";;
  r)  REBOOT=Y;;
  s)  SKIP_CHG_CHECK=Y;;
  v)  SKIP_SHA_CHECK=Y;;
  U)  upgrade;;
  *)  usage;;
 esac
done
shift $((OPTIND-1))

MOUNT_PATH=$(uci get mountd.mountd.path)
USB="$(ls $MOUNT_PATH | head -n1)"
if [ -z "$USB" ]; then
  SSHFS=$(grep -m 1 fuse\.sshfs /proc/mounts | cut -d" " -f2)
  if [ -z "$SSHFS" ]; then
    echo -e "$(date +%F@%X): ${RED}ERROR! No USB device or mounted SSHFS filesystem found${NC}"
    exit 2
  else
    SOURCE=${SSHFS}/${DIR}
  fi
else
  SOURCE=${MOUNT_PATH}${USB}/${DIR}
fi

if [ ! -d $SOURCE ]; then
  if [ -d $SOURCE-$VERSION ]; then
    SOURCE=$SOURCE-$VERSION
  else
    echo -e "$(date +%F@%X): ${RED}ERROR! Backup source $SOURCE not found${NC}"
    exit 2
  fi
fi

[ $# -eq 0 ] && DFLT_RESTORE="rootfs_data"
for p in $DFLT_RESTORE $*; do
  COUNT=$(ls $SOURCE 2>/dev/null | grep -E "$VARIANT-.*$p.*\.img\.gz" | wc -l)
  if [ $COUNT -eq 1 ]; then
    IMAGES="$IMAGES $(ls $SOURCE 2>/dev/null | grep -E "$VARIANT-.*$p.*\.img\.gz")"
  elif [ $COUNT -eq 0 ]; then
    echo -e "$(date +%F@%X): ${ORANGE}WARNING! Could not find a backup matching $p - IGNORED${NC}"
  else
    echo -e "$(date +%F@%X): ${ORANGE}WARNING! Found $COUNT backups matching $p - IGNORED${NC}"
    ls $SOURCE 2>/dev/null | grep -E "$VARIANT-.*$p.*\.img\.gz" | while read line; do echo "                     -> $line"; done
  fi
done

if [ -z "$IMAGES" ]; then
  echo -e "$(date +%F@%X): ${RED}ERROR! No valid backups selected for restore${NC}"
  exit 2
fi

IMAGES=$(echo $IMAGES | tr " " "\n" | sort -u | xargs)
LAST=""
RESTORE_UBI="N"
echo "$(date +%F@%X): $(echo $IMAGES | wc -w) backups selected for restore:"
for gz in $IMAGES; do
  echo "                     -> $gz"
  LAST="$gz"
  echo "$gz" | grep -qE "$VARIANT-ubi" && RESTORE_UBI="Y"
done
[ $SWAP_BANKS = Y ] && echo -e "$(date +%F@%X): ${ORANGE}NOTE: Firmware partitions will be restored to the OTHER bank!${NC}"
[ $SKIP_CHG_CHECK = Y ] && echo -e "$(date +%F@%X): ${ORANGE}NOTE: Partitions will be restored WITHOUT checking for changes first!${NC}"
[ $RESTORE_UBI = Y ] && echo -e "$(date +%F@%X): ${RED}WARNING: ${ORANGE}Attempting to restore a UBIFS backup to a mounted device will ${RED}FAIL!${NC}"
[ $DRY_RUN = N -a $REBOOT = Y ] && echo -e "$(date +%F@%X): ${ORANGE}NOTE: Device will be rebooted after restoring $LAST!${NC}"
[ $DRY_RUN = Y ] && echo -e "$(date +%F@%X): ${ORANGE}NOTE: This is a DRY RUN - no partitions will be restored.${NC}"
echo -e -n "$(date +%F@%X): ${GREEN}If you wish to commence the restore, enter y otherwise just press [Enter] to exit:${NC} "
read
[ "$REPLY" != "y" -a "$REPLY" != "Y" ] && exit

echo "$(date +%F@%X): Cleaning up any old images..."
find $SOURCE -name "$VARIANT-*.img" -exec rm {} \;

restoreMTD() {
  local RETVAL
  local COMMAND
  if [ $REBOOT = Y -a "$LAST" = "$gz" ]; then
    echo "$(date +%F@%X): RESTORING $SOURCE/$VARIANT-$dev-$name.img to partition $TARGET ($PARTITION) and rebooting"
    COMMAND="mtd $QUIET -r -e $PARTITION write $SOURCE/$VARIANT-$dev-$name.img $PARTITION"
    [ $DRY_RUN = N ] && $COMMAND || echo "$(date +%F@%X): *DRY RUN* $COMMAND"
    RETVAL=$?
  else
    echo "$(date +%F@%X): RESTORING $SOURCE/$VARIANT-$dev-$name.img to partition $TARGET ($PARTITION)"
    COMMAND="mtd $QUIET -e $PARTITION write $SOURCE/$VARIANT-$dev-$name.img $PARTITION"
    [ $DRY_RUN = N ] && $COMMAND || echo "$(date +%F@%X): *DRY RUN* $COMMAND"
    RETVAL=$?
  fi
  return $RETVAL
}

restoreUBI() {
  local RETVAL
  local COMMAND
  if [ $REBOOT = Y -a "$LAST" = "$gz" ]; then
    echo "$(date +%F@%X): RESTORING $SOURCE/$VARIANT-$dev-$name.img to partition $TARGET ($PARTITION) and rebooting"
  else
    echo "$(date +%F@%X): RESTORING $SOURCE/$VARIANT-$dev-$name.img to partition $TARGET ($PARTITION)"
  fi
  COMMAND="ubiupdatevol $TARGET -t"
  [ $DRY_RUN = N ] && $COMMAND || echo "$(date +%F@%X): *DRY RUN* $COMMAND"
  RETVAL=$?
  if [ $RETVAL -eq 0 ]; then
    COMMAND="ubiupdatevol $TARGET $SOURCE/$VARIANT-$dev-$name.img"
    [ $DRY_RUN = N ] && $COMMAND || echo "$(date +%F@%X): *DRY RUN* $COMMAND"
    RETVAL=$?
    [ $DRY_RUN = N -a $RETVAL -eq 0 -a \( $REBOOT = Y -a \( "$LAST" = "$gz" -o "$PARTITION" = "rootfs_data" \) \) ] && reboot
  else
    echo -e "$(date +%F@%X): ${RED}ABORTING $SOURCE/$VARIANT-$dev-$name.img restore - failed to erase volume!${NC}"
  fi
  return $RETVAL
}

restoreDevice() {
  echo $dev | grep -q "^mtd" && restoreMTD || restoreUBI
  if [ $DRY_RUN = N ]; then
    if [ $? -eq 0 ]; then
      echo -e "$(date +%F@%X): ${GREEN}RESTORED $SOURCE/$VARIANT-$dev-$name.img to partition $TARGET ($PARTITION)${NC}"
      echo $SOURCE/$VARIANT-$dev-$name.img > $RESTORED
    else
      echo -e "$(date +%F@%X): ${RED}FAILED to restore $SOURCE/$VARIANT-$dev-$name.img to partition $TARGET ($PARTITION)!${NC}"
    fi
  fi
}

RESTORED="$(mktemp)"

for gz in $IMAGES; do
  echo "$(date +%F@%X): PROCESSING backup $gz"

  if echo $gz | grep -qe '-mtd0-'; then
    echo -e "$(date +%F@%X): ${ORANGE}SORRY! You cannot restore mtd0 using this script${NC}"
    continue
  fi

  basename $gz | sed -e "s/^$VARIANT-\(mtd\|ubi\)\([^-]*\)-\(.*\).img.gz$/\1\2 \3/" | while read -r dev name; do
    TARGET="/dev/${dev}"
    PARTITION="$(echo $name | cut -d- -f1)"
    SHA256CHK=N

    if [ $SWAP_BANKS = Y ]; then
      if [ "$dev" = "mtd3" -a "$PARTITION" = "bank_1" ]; then
        TARGET="/dev/mtd4" 
        PARTITION="bank_2"
      elif [ "$dev" = "mtd4" -a "$PARTITION" = "bank_2" ]; then
        TARGET="/dev/mtd3"
        PARTITION="bank_1"
      elif [ "$dev" = "ubi0_3" -a "$PARTITION" = "bootfs1" ]; then
        TARGET="/dev/ubi0_5"
        PARTITION="bootfs2"
      elif [ "$dev" = "ubi0_4" -a "$PARTITION" = "rootfs1" ]; then
        TARGET="/dev/ubi0_6"
        PARTITION="rootfs2"
      elif [ "$dev" = "ubi0_5" -a "$PARTITION" = "bootfs2" ]; then
        TARGET="/dev/ubi0_3"
        PARTITION="bootfs1"
      elif [ "$dev" = "ubi0_6" -a "$PARTITION" = "rootfs2" ]; then
        TARGET="/dev/ubi0_4"
        PARTITION="rootfs1"
      fi
    fi

    if [ $SKIP_CHG_CHECK = N ]; then
      if [ -f $SOURCE/$VARIANT-$dev-$name.img.sha256= ]; then
        SHA256CHK=Y
        SHA256OLD="$(cat $SOURCE/$VARIANT-$dev-$name.img.sha256= | cut -d' ' -f1)"
      elif [ -f $SOURCE/$VARIANT-$dev-$name.img.sha256 ]; then
        SHA256OLD="$(cat $SOURCE/$VARIANT-$dev-$name.img.sha256 | cut -d' ' -f1)"
      else
        echo -e "$(date +%F@%X): ${ORANGE}SKIPPED restore of $gz: $VARIANT-$dev-$name.img.sha256 does not exist?${NC}"
        continue
      fi
      echo "$(date +%F@%X): CALCULATING current SHA256 checksum for $TARGET ($PARTITION)"
      [ -e "${TARGET}ro" ] && source="${TARGET}ro" || source="$TARGET"
      SHA256=$(sha256sum "$source" | cut -d' ' -f1)
    else
      SHA256OLD="SHA256OLD"
      SHA256="SHA256"
    fi

    if [ "$SHA256" = "$SHA256OLD" ]; then
      echo -e "$(date +%F@%X): ${GREEN}SKIPPED restore of $gz - Checksums for $TARGET match therefore image unchanged${NC}"
    else
      echo "$(date +%F@%X): EXPANDING $dev backup to temporary file $SOURCE/$VARIANT-$dev-$name.img"
      if [ $SKIP_SHA_CHECK = N -a $SHA256CHK = Y ]; then
        SHA256IMG="$(gzip -dc $SOURCE/$gz | tee $SOURCE/$VARIANT-$dev-$name.img | sha256sum | cut -d' ' -f1)"
        if [ "$SHA256OLD" = "$SHA256IMG" ]; then
          echo "$(date +%F@%X): VERIFICATION of $SOURCE/$VARIANT-$dev-$name.img checksum SUCCEEDED"
          VERIFIED=0
        else
          echo -e "$(date +%F@%X): ${RED}VERIFICATION of $SOURCE/$VARIANT-$dev-$name.img checksum FAILED!!${NC}"
          echo "$(date +%F@%X):  -> CALCULATED $SHA256IMG"
          echo "$(date +%F@%X):  -> SHOULD BE  $SHA256OLD (from $VARIANT-$dev-$name.img.sha256=)"
          VERIFIED=1
        fi
      else
        gzip -dc $SOURCE/$gz > $SOURCE/$VARIANT-$dev-$name.img
        VERIFIED=$?
      fi
      if [ $VERIFIED -eq 0 ]; then
        restoreDevice
      else
        echo -e "$(date +%F@%X): ${RED}FAILED to successfully expand $TARGET backup to $SOURCE/$VARIANT-$dev-$name.img!${NC}"
      fi
    fi
    if [ -f $SOURCE/$VARIANT-$dev-$name.img ]; then
      echo "$(date +%F@%X): DELETING temporary file $SOURCE/$VARIANT-$dev-$name.img"
      rm $SOURCE/$VARIANT-$dev-$name.img
    fi
  done
done

echo "$(date +%F@%X): COMPLETED"
[ $(cat $RESTORED | wc -l) -gt 0 ] && echo -e "$(date +%F@%X): ${ORANGE}You may need to manually power cycle the device now...${NC}"
rm -rf $RESTORED
